version: '3.9'

services:
  rabbitmq:
    image: katanaml/rabbitmq-service
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    container_name: rabbitmq-service
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./backend-rabbitmq/etc/:/etc/backend/
      - ./backend-rabbitmq/data/:/var/lib/backend/
      - ./backend-rabbitmq/logs/:/var/log/backend/
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=welcome1
      - RABBITMQ_NODENAME=rabbitnode@localhost
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
    networks:
      - network1
    restart: always

  logger:
    image: katanaml/skipper-logger
    build:
      context: ./logger
      dockerfile: Dockerfile
    container_name: skipper-logger
    ports:
      - 5001:5001
    networks:
      - network1

  workflow:
    image: katanaml/skipper-workflow
    build:
      context: ./workflow
      dockerfile: Dockerfile
    container_name: skipper-workflow
    ports:
      - 5000:5000
    environment:
      - LOGGER_URL=http://logger:5001/api/v1/skipper/logger/log_workflow
    networks:
      - network1

  api:
    image: katanaml/skipper-api
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: skipper-api
    command: uvicorn endpoint:app --port=8000 --host 0.0.0.0
    ports:
      - 8000:8000
    environment:
      - WORKFLOW_URL=http://workflow:5000/api/v1/skipper/workflow/
      - LOGGER_PRODUCER_URL=http://logger:5001/api/v1/skipper/logger/log_producer
      - RABBITMQ_BROKER=pyamqp://skipper:welcome1@rabbitmq//
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - BOSTON_ENABLED=y
      - MOBILENET_ENABLED=y
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  api-celery:
    image: katanaml/skipper-api-celery
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: skipper-api-celery
    command: celery -A api.worker worker --loglevel=INFO
    environment:
      - WORKFLOW_URL=http://workflow:5000/api/v1/skipper/workflow/
      - LOGGER_PRODUCER_URL=http://logger:5001/api/v1/skipper/logger/log_producer
      - RABBITMQ_BROKER=pyamqp://skipper:welcome1@rabbitmq//
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
    networks:
      - network1
    depends_on:
      - api
    restart: on-failure

  # Sample set of services, you should replace with your own services
  data-service:
    image: katanaml/data-service
    build:
      context: ./services/dataservice
      dockerfile: Dockerfile
    container_name: data-service
    volumes:
      - ./services/models/:/usr/src/dataservice/models:rw
    environment:
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_data
      - SERVICE_NAME=data
      - STATS_FILE=/usr/src/dataservice/models/train_stats.csv
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  training-service:
    image: katanaml/training-service
    build:
      context: ./services/trainingservice
      dockerfile: Dockerfile
    container_name: training-service
    volumes:
      - ./services/models/:/usr/src/trainingservice/models:rw
    environment:
      - LOGGER_PRODUCER_URL=http://logger:5001/api/v1/skipper/logger/log_producer
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_training
      - SERVICE_NAME=training
      - QUEUE_NAME_DATA=skipper_data
      - QUEUE_NAME_STORAGE=skipper_storage
      - MODELS_FOLDER=/usr/src/trainingservice/models/model_boston_
      - STATS_FILE=/usr/src/trainingservice/models/train_stats.csv
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  serving-service:
    image: katanaml/serving-service
    build:
      context: ./services/servingservice
      dockerfile: Dockerfile
    container_name: serving-service
    volumes:
      - ./services/models/:/usr/src/servingservice/models:rw
    environment:
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_serving
      - SERVICE_NAME=serving
      - MODELS_FOLDER=/usr/src/servingservice/models/serving/
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  storage-service:
    image: katanaml/storage-service
    build:
      context: ./services/servingservice/storage
      dockerfile: Dockerfile
    container_name: storage-service
    volumes:
      - ./services/models/serving/:/usr/src/servingservice/storage/models/serving:rw
    environment:
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_storage
      - SERVICE_NAME=serving
      - MODELS_FOLDER=/usr/src/servingservice/storage/models/serving/
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  mobilenet-service:
    image: katanaml/mobilenet-service
    build:
      context: ./services/mobilenetservice
      dockerfile: Dockerfile
    container_name: mobilenet-service
    environment:
      - LOGGER_PRODUCER_URL=http://logger:5001/api/v1/skipper/logger/log_producer
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_mobilenet
      - SERVICE_NAME=mobilenet
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure
  # Sample set of services, you should replace with your own services

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx_config.conf:/etc/nginx/conf.d/default.conf
    networks:
      - network1
    depends_on:
      - api

networks:
  network1:
    name: katana-network
